program SOFBMonOrbit
option +s;
option -c;

double timeout, window;
int timeout_cnt;

assign timeout to "{P}{R}SlowOrbTimeout-SP";
monitor timeout;
assign window to "{P}{R}SlowOrbWindow-SP";
monitor window;
assign timeout_cnt to "{P}{R}{TARGET}TimeoutCnt-Mon";

float orbit[320];
float orbit_from_bpms[320];

float orbit_divisor;
assign orbit_divisor to "{P}{R}{TARGET}Divisor-Cte";

assign orbit to "{P}{R}{TARGET}Raw-Mon";
assign orbit_from_bpms to {
    "SI-01M2:DI-BPM:{FIRST}",
    "SI-01C1:DI-BPM-1:{FIRST}",
    "SI-01C1:DI-BPM-2:{FIRST}",
    "SI-01C2:DI-BPM:{FIRST}",
    "SI-01C3:DI-BPM-1:{FIRST}",
    "SI-01C3:DI-BPM-2:{FIRST}",
    "SI-01C4:DI-BPM:{FIRST}",
    "SI-02M1:DI-BPM:{FIRST}",
    "SI-02M2:DI-BPM:{FIRST}",
    "SI-02C1:DI-BPM-1:{FIRST}",
    "SI-02C1:DI-BPM-2:{FIRST}",
    "SI-02C2:DI-BPM:{FIRST}",
    "SI-02C3:DI-BPM-1:{FIRST}",
    "SI-02C3:DI-BPM-2:{FIRST}",
    "SI-02C4:DI-BPM:{FIRST}",
    "SI-03M1:DI-BPM:{FIRST}",
    "SI-03M2:DI-BPM:{FIRST}",
    "SI-03C1:DI-BPM-1:{FIRST}",
    "SI-03C1:DI-BPM-2:{FIRST}",
    "SI-03C2:DI-BPM:{FIRST}",
    "SI-03C3:DI-BPM-1:{FIRST}",
    "SI-03C3:DI-BPM-2:{FIRST}",
    "SI-03C4:DI-BPM:{FIRST}",
    "SI-04M1:DI-BPM:{FIRST}",
    "SI-04M2:DI-BPM:{FIRST}",
    "SI-04C1:DI-BPM-1:{FIRST}",
    "SI-04C1:DI-BPM-2:{FIRST}",
    "SI-04C2:DI-BPM:{FIRST}",
    "SI-04C3:DI-BPM-1:{FIRST}",
    "SI-04C3:DI-BPM-2:{FIRST}",
    "SI-04C4:DI-BPM:{FIRST}",
    "SI-05M1:DI-BPM:{FIRST}",
    "SI-05M2:DI-BPM:{FIRST}",
    "SI-05C1:DI-BPM-1:{FIRST}",
    "SI-05C1:DI-BPM-2:{FIRST}",
    "SI-05C2:DI-BPM:{FIRST}",
    "SI-05C3:DI-BPM-1:{FIRST}",
    "SI-05C3:DI-BPM-2:{FIRST}",
    "SI-05C4:DI-BPM:{FIRST}",
    "SI-06M1:DI-BPM:{FIRST}",
    "SI-06M2:DI-BPM:{FIRST}",
    "SI-06C1:DI-BPM-1:{FIRST}",
    "SI-06C1:DI-BPM-2:{FIRST}",
    "SI-06C2:DI-BPM:{FIRST}",
    "SI-06C3:DI-BPM-1:{FIRST}",
    "SI-06C3:DI-BPM-2:{FIRST}",
    "SI-06C4:DI-BPM:{FIRST}",
    "SI-07M1:DI-BPM:{FIRST}",
    "SI-07M2:DI-BPM:{FIRST}",
    "SI-07C1:DI-BPM-1:{FIRST}",
    "SI-07C1:DI-BPM-2:{FIRST}",
    "SI-07C2:DI-BPM:{FIRST}",
    "SI-07C3:DI-BPM-1:{FIRST}",
    "SI-07C3:DI-BPM-2:{FIRST}",
    "SI-07C4:DI-BPM:{FIRST}",
    "SI-08M1:DI-BPM:{FIRST}",
    "SI-08M2:DI-BPM:{FIRST}",
    "SI-08C1:DI-BPM-1:{FIRST}",
    "SI-08C1:DI-BPM-2:{FIRST}",
    "SI-08C2:DI-BPM:{FIRST}",
    "SI-08C3:DI-BPM-1:{FIRST}",
    "SI-08C3:DI-BPM-2:{FIRST}",
    "SI-08C4:DI-BPM:{FIRST}",
    "SI-09M1:DI-BPM:{FIRST}",
    "SI-09M2:DI-BPM:{FIRST}",
    "SI-09C1:DI-BPM-1:{FIRST}",
    "SI-09C1:DI-BPM-2:{FIRST}",
    "SI-09C2:DI-BPM:{FIRST}",
    "SI-09C3:DI-BPM-1:{FIRST}",
    "SI-09C3:DI-BPM-2:{FIRST}",
    "SI-09C4:DI-BPM:{FIRST}",
    "SI-10M1:DI-BPM:{FIRST}",
    "SI-10M2:DI-BPM:{FIRST}",
    "SI-10C1:DI-BPM-1:{FIRST}",
    "SI-10C1:DI-BPM-2:{FIRST}",
    "SI-10C2:DI-BPM:{FIRST}",
    "SI-10C3:DI-BPM-1:{FIRST}",
    "SI-10C3:DI-BPM-2:{FIRST}",
    "SI-10C4:DI-BPM:{FIRST}",
    "SI-11M1:DI-BPM:{FIRST}",
    "SI-11M2:DI-BPM:{FIRST}",
    "SI-11C1:DI-BPM-1:{FIRST}",
    "SI-11C1:DI-BPM-2:{FIRST}",
    "SI-11C2:DI-BPM:{FIRST}",
    "SI-11C3:DI-BPM-1:{FIRST}",
    "SI-11C3:DI-BPM-2:{FIRST}",
    "SI-11C4:DI-BPM:{FIRST}",
    "SI-12M1:DI-BPM:{FIRST}",
    "SI-12M2:DI-BPM:{FIRST}",
    "SI-12C1:DI-BPM-1:{FIRST}",
    "SI-12C1:DI-BPM-2:{FIRST}",
    "SI-12C2:DI-BPM:{FIRST}",
    "SI-12C3:DI-BPM-1:{FIRST}",
    "SI-12C3:DI-BPM-2:{FIRST}",
    "SI-12C4:DI-BPM:{FIRST}",
    "SI-13M1:DI-BPM:{FIRST}",
    "SI-13M2:DI-BPM:{FIRST}",
    "SI-13C1:DI-BPM-1:{FIRST}",
    "SI-13C1:DI-BPM-2:{FIRST}",
    "SI-13C2:DI-BPM:{FIRST}",
    "SI-13C3:DI-BPM-1:{FIRST}",
    "SI-13C3:DI-BPM-2:{FIRST}",
    "SI-13C4:DI-BPM:{FIRST}",
    "SI-14M1:DI-BPM:{FIRST}",
    "SI-14M2:DI-BPM:{FIRST}",
    "SI-14C1:DI-BPM-1:{FIRST}",
    "SI-14C1:DI-BPM-2:{FIRST}",
    "SI-14C2:DI-BPM:{FIRST}",
    "SI-14C3:DI-BPM-1:{FIRST}",
    "SI-14C3:DI-BPM-2:{FIRST}",
    "SI-14C4:DI-BPM:{FIRST}",
    "SI-15M1:DI-BPM:{FIRST}",
    "SI-15M2:DI-BPM:{FIRST}",
    "SI-15C1:DI-BPM-1:{FIRST}",
    "SI-15C1:DI-BPM-2:{FIRST}",
    "SI-15C2:DI-BPM:{FIRST}",
    "SI-15C3:DI-BPM-1:{FIRST}",
    "SI-15C3:DI-BPM-2:{FIRST}",
    "SI-15C4:DI-BPM:{FIRST}",
    "SI-16M1:DI-BPM:{FIRST}",
    "SI-16M2:DI-BPM:{FIRST}",
    "SI-16C1:DI-BPM-1:{FIRST}",
    "SI-16C1:DI-BPM-2:{FIRST}",
    "SI-16C2:DI-BPM:{FIRST}",
    "SI-16C3:DI-BPM-1:{FIRST}",
    "SI-16C3:DI-BPM-2:{FIRST}",
    "SI-16C4:DI-BPM:{FIRST}",
    "SI-17M1:DI-BPM:{FIRST}",
    "SI-17M2:DI-BPM:{FIRST}",
    "SI-17C1:DI-BPM-1:{FIRST}",
    "SI-17C1:DI-BPM-2:{FIRST}",
    "SI-17C2:DI-BPM:{FIRST}",
    "SI-17C3:DI-BPM-1:{FIRST}",
    "SI-17C3:DI-BPM-2:{FIRST}",
    "SI-17C4:DI-BPM:{FIRST}",
    "SI-18M1:DI-BPM:{FIRST}",
    "SI-18M2:DI-BPM:{FIRST}",
    "SI-18C1:DI-BPM-1:{FIRST}",
    "SI-18C1:DI-BPM-2:{FIRST}",
    "SI-18C2:DI-BPM:{FIRST}",
    "SI-18C3:DI-BPM-1:{FIRST}",
    "SI-18C3:DI-BPM-2:{FIRST}",
    "SI-18C4:DI-BPM:{FIRST}",
    "SI-19M1:DI-BPM:{FIRST}",
    "SI-19M2:DI-BPM:{FIRST}",
    "SI-19C1:DI-BPM-1:{FIRST}",
    "SI-19C1:DI-BPM-2:{FIRST}",
    "SI-19C2:DI-BPM:{FIRST}",
    "SI-19C3:DI-BPM-1:{FIRST}",
    "SI-19C3:DI-BPM-2:{FIRST}",
    "SI-19C4:DI-BPM:{FIRST}",
    "SI-20M1:DI-BPM:{FIRST}",
    "SI-20M2:DI-BPM:{FIRST}",
    "SI-20C1:DI-BPM-1:{FIRST}",
    "SI-20C1:DI-BPM-2:{FIRST}",
    "SI-20C2:DI-BPM:{FIRST}",
    "SI-20C3:DI-BPM-1:{FIRST}",
    "SI-20C3:DI-BPM-2:{FIRST}",
    "SI-20C4:DI-BPM:{FIRST}",
    "SI-01M1:DI-BPM:{FIRST}",
    "SI-01M2:DI-BPM:{SECOND}",
    "SI-01C1:DI-BPM-1:{SECOND}",
    "SI-01C1:DI-BPM-2:{SECOND}",
    "SI-01C2:DI-BPM:{SECOND}",
    "SI-01C3:DI-BPM-1:{SECOND}",
    "SI-01C3:DI-BPM-2:{SECOND}",
    "SI-01C4:DI-BPM:{SECOND}",
    "SI-02M1:DI-BPM:{SECOND}",
    "SI-02M2:DI-BPM:{SECOND}",
    "SI-02C1:DI-BPM-1:{SECOND}",
    "SI-02C1:DI-BPM-2:{SECOND}",
    "SI-02C2:DI-BPM:{SECOND}",
    "SI-02C3:DI-BPM-1:{SECOND}",
    "SI-02C3:DI-BPM-2:{SECOND}",
    "SI-02C4:DI-BPM:{SECOND}",
    "SI-03M1:DI-BPM:{SECOND}",
    "SI-03M2:DI-BPM:{SECOND}",
    "SI-03C1:DI-BPM-1:{SECOND}",
    "SI-03C1:DI-BPM-2:{SECOND}",
    "SI-03C2:DI-BPM:{SECOND}",
    "SI-03C3:DI-BPM-1:{SECOND}",
    "SI-03C3:DI-BPM-2:{SECOND}",
    "SI-03C4:DI-BPM:{SECOND}",
    "SI-04M1:DI-BPM:{SECOND}",
    "SI-04M2:DI-BPM:{SECOND}",
    "SI-04C1:DI-BPM-1:{SECOND}",
    "SI-04C1:DI-BPM-2:{SECOND}",
    "SI-04C2:DI-BPM:{SECOND}",
    "SI-04C3:DI-BPM-1:{SECOND}",
    "SI-04C3:DI-BPM-2:{SECOND}",
    "SI-04C4:DI-BPM:{SECOND}",
    "SI-05M1:DI-BPM:{SECOND}",
    "SI-05M2:DI-BPM:{SECOND}",
    "SI-05C1:DI-BPM-1:{SECOND}",
    "SI-05C1:DI-BPM-2:{SECOND}",
    "SI-05C2:DI-BPM:{SECOND}",
    "SI-05C3:DI-BPM-1:{SECOND}",
    "SI-05C3:DI-BPM-2:{SECOND}",
    "SI-05C4:DI-BPM:{SECOND}",
    "SI-06M1:DI-BPM:{SECOND}",
    "SI-06M2:DI-BPM:{SECOND}",
    "SI-06C1:DI-BPM-1:{SECOND}",
    "SI-06C1:DI-BPM-2:{SECOND}",
    "SI-06C2:DI-BPM:{SECOND}",
    "SI-06C3:DI-BPM-1:{SECOND}",
    "SI-06C3:DI-BPM-2:{SECOND}",
    "SI-06C4:DI-BPM:{SECOND}",
    "SI-07M1:DI-BPM:{SECOND}",
    "SI-07M2:DI-BPM:{SECOND}",
    "SI-07C1:DI-BPM-1:{SECOND}",
    "SI-07C1:DI-BPM-2:{SECOND}",
    "SI-07C2:DI-BPM:{SECOND}",
    "SI-07C3:DI-BPM-1:{SECOND}",
    "SI-07C3:DI-BPM-2:{SECOND}",
    "SI-07C4:DI-BPM:{SECOND}",
    "SI-08M1:DI-BPM:{SECOND}",
    "SI-08M2:DI-BPM:{SECOND}",
    "SI-08C1:DI-BPM-1:{SECOND}",
    "SI-08C1:DI-BPM-2:{SECOND}",
    "SI-08C2:DI-BPM:{SECOND}",
    "SI-08C3:DI-BPM-1:{SECOND}",
    "SI-08C3:DI-BPM-2:{SECOND}",
    "SI-08C4:DI-BPM:{SECOND}",
    "SI-09M1:DI-BPM:{SECOND}",
    "SI-09M2:DI-BPM:{SECOND}",
    "SI-09C1:DI-BPM-1:{SECOND}",
    "SI-09C1:DI-BPM-2:{SECOND}",
    "SI-09C2:DI-BPM:{SECOND}",
    "SI-09C3:DI-BPM-1:{SECOND}",
    "SI-09C3:DI-BPM-2:{SECOND}",
    "SI-09C4:DI-BPM:{SECOND}",
    "SI-10M1:DI-BPM:{SECOND}",
    "SI-10M2:DI-BPM:{SECOND}",
    "SI-10C1:DI-BPM-1:{SECOND}",
    "SI-10C1:DI-BPM-2:{SECOND}",
    "SI-10C2:DI-BPM:{SECOND}",
    "SI-10C3:DI-BPM-1:{SECOND}",
    "SI-10C3:DI-BPM-2:{SECOND}",
    "SI-10C4:DI-BPM:{SECOND}",
    "SI-11M1:DI-BPM:{SECOND}",
    "SI-11M2:DI-BPM:{SECOND}",
    "SI-11C1:DI-BPM-1:{SECOND}",
    "SI-11C1:DI-BPM-2:{SECOND}",
    "SI-11C2:DI-BPM:{SECOND}",
    "SI-11C3:DI-BPM-1:{SECOND}",
    "SI-11C3:DI-BPM-2:{SECOND}",
    "SI-11C4:DI-BPM:{SECOND}",
    "SI-12M1:DI-BPM:{SECOND}",
    "SI-12M2:DI-BPM:{SECOND}",
    "SI-12C1:DI-BPM-1:{SECOND}",
    "SI-12C1:DI-BPM-2:{SECOND}",
    "SI-12C2:DI-BPM:{SECOND}",
    "SI-12C3:DI-BPM-1:{SECOND}",
    "SI-12C3:DI-BPM-2:{SECOND}",
    "SI-12C4:DI-BPM:{SECOND}",
    "SI-13M1:DI-BPM:{SECOND}",
    "SI-13M2:DI-BPM:{SECOND}",
    "SI-13C1:DI-BPM-1:{SECOND}",
    "SI-13C1:DI-BPM-2:{SECOND}",
    "SI-13C2:DI-BPM:{SECOND}",
    "SI-13C3:DI-BPM-1:{SECOND}",
    "SI-13C3:DI-BPM-2:{SECOND}",
    "SI-13C4:DI-BPM:{SECOND}",
    "SI-14M1:DI-BPM:{SECOND}",
    "SI-14M2:DI-BPM:{SECOND}",
    "SI-14C1:DI-BPM-1:{SECOND}",
    "SI-14C1:DI-BPM-2:{SECOND}",
    "SI-14C2:DI-BPM:{SECOND}",
    "SI-14C3:DI-BPM-1:{SECOND}",
    "SI-14C3:DI-BPM-2:{SECOND}",
    "SI-14C4:DI-BPM:{SECOND}",
    "SI-15M1:DI-BPM:{SECOND}",
    "SI-15M2:DI-BPM:{SECOND}",
    "SI-15C1:DI-BPM-1:{SECOND}",
    "SI-15C1:DI-BPM-2:{SECOND}",
    "SI-15C2:DI-BPM:{SECOND}",
    "SI-15C3:DI-BPM-1:{SECOND}",
    "SI-15C3:DI-BPM-2:{SECOND}",
    "SI-15C4:DI-BPM:{SECOND}",
    "SI-16M1:DI-BPM:{SECOND}",
    "SI-16M2:DI-BPM:{SECOND}",
    "SI-16C1:DI-BPM-1:{SECOND}",
    "SI-16C1:DI-BPM-2:{SECOND}",
    "SI-16C2:DI-BPM:{SECOND}",
    "SI-16C3:DI-BPM-1:{SECOND}",
    "SI-16C3:DI-BPM-2:{SECOND}",
    "SI-16C4:DI-BPM:{SECOND}",
    "SI-17M1:DI-BPM:{SECOND}",
    "SI-17M2:DI-BPM:{SECOND}",
    "SI-17C1:DI-BPM-1:{SECOND}",
    "SI-17C1:DI-BPM-2:{SECOND}",
    "SI-17C2:DI-BPM:{SECOND}",
    "SI-17C3:DI-BPM-1:{SECOND}",
    "SI-17C3:DI-BPM-2:{SECOND}",
    "SI-17C4:DI-BPM:{SECOND}",
    "SI-18M1:DI-BPM:{SECOND}",
    "SI-18M2:DI-BPM:{SECOND}",
    "SI-18C1:DI-BPM-1:{SECOND}",
    "SI-18C1:DI-BPM-2:{SECOND}",
    "SI-18C2:DI-BPM:{SECOND}",
    "SI-18C3:DI-BPM-1:{SECOND}",
    "SI-18C3:DI-BPM-2:{SECOND}",
    "SI-18C4:DI-BPM:{SECOND}",
    "SI-19M1:DI-BPM:{SECOND}",
    "SI-19M2:DI-BPM:{SECOND}",
    "SI-19C1:DI-BPM-1:{SECOND}",
    "SI-19C1:DI-BPM-2:{SECOND}",
    "SI-19C2:DI-BPM:{SECOND}",
    "SI-19C3:DI-BPM-1:{SECOND}",
    "SI-19C3:DI-BPM-2:{SECOND}",
    "SI-19C4:DI-BPM:{SECOND}",
    "SI-20M1:DI-BPM:{SECOND}",
    "SI-20M2:DI-BPM:{SECOND}",
    "SI-20C1:DI-BPM-1:{SECOND}",
    "SI-20C1:DI-BPM-2:{SECOND}",
    "SI-20C2:DI-BPM:{SECOND}",
    "SI-20C3:DI-BPM-1:{SECOND}",
    "SI-20C3:DI-BPM-2:{SECOND}",
    "SI-20C4:DI-BPM:{SECOND}",
    "SI-01M1:DI-BPM:{SECOND}"
};
monitor orbit_from_bpms;

evflag orbit_from_bpms_event;
sync orbit_from_bpms to orbit_from_bpms_event;

%%#include <math.h>
%%#include <stdio.h>

%%#include <epicsTime.h>

entry {
    pvGet(orbit_divisor);
    pvPut(timeout_cnt, ASYNC);
}

ss scan {

    struct epicsTimeStamp sentinels[320] = {0};

    state wait {
        int go_to_read_all;
        entry {
            go_to_read_all = 0;
        }

        when (go_to_read_all) {
        } state read_all

        when (efTest(orbit_from_bpms_event)) {
            struct epicsTimeStamp ts[320];
            int i;
            for (i = 0; i < 320; i++) {
                ts[i] = pvTimeStamp(orbit_from_bpms[i]);
                if (epicsTimeNotEqual(ts+i, sentinels+i)) {
                    go_to_read_all = 1;
                    break;
                }
            }
        } state wait
    }

    state read_all {
        option -t; /* make delays inside the same state work */

        double spread;
        entry {
            spread = INFINITY;
        }

        when (delay(timeout)) {
            if (pvPutComplete(orbit)) pvPut(orbit, ASYNC);

            timeout_cnt++;
            if (pvPutComplete(timeout_cnt)) pvPut(timeout_cnt, ASYNC);
        } state wait

        when (spread <= window) {
            if (pvPutComplete(orbit)) pvPut(orbit, ASYNC);
        } state wait

        when (efTestAndClear(orbit_from_bpms_event)) {
            struct epicsTimeStamp ts[320];
            int max_idx, min_idx, i;
            int first_write = 0;
            for (i = 0; i < 320; i++) {
                /* consumers of the orbit array want to know when some BPM has
                 * been disconnected. This also means we aren't using the PV's
                 * timestamp to calculate the spread, which avoids timing out */
                if (!pvConnected(orbit_from_bpms[i])) {
                    orbit[i] = NAN;
                    continue;
                }

                ts[i] = pvTimeStamp(orbit_from_bpms[i]);
                if (first_write) {
                    if (epicsTimeLessThan(ts+i, ts+min_idx)) min_idx = i;
                    else if (epicsTimeGreaterThan(ts+i, ts+max_idx)) max_idx = i;
                } else {
                    first_write = 1;
                    max_idx = min_idx = i;
                }

                /* get orbit ready for pvPut here, since PV monitors can be posted between transitions */
                if (epicsTimeNotEqual(ts+i, sentinels+i)) {
                    sentinels[i] = ts[i];
                    orbit[i] = orbit_from_bpms[i] / orbit_divisor; /* convert to um */
                }
            }
            /* if all PVs were disconnected, simply post orbit */
            if (first_write)
                spread = epicsTimeDiffInSeconds(ts+max_idx, ts+min_idx);
            else
                spread = 0;
        } state read_all
    }

}
